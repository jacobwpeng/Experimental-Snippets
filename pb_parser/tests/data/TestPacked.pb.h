// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestPacked.proto

#ifndef PROTOBUF_TestPacked_2eproto__INCLUDED
#define PROTOBUF_TestPacked_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TestPacked_2eproto();
void protobuf_AssignDesc_TestPacked_2eproto();
void protobuf_ShutdownFile_TestPacked_2eproto();

class Packed;

// ===================================================================

class Packed : public ::google::protobuf::Message {
 public:
  Packed();
  virtual ~Packed();

  Packed(const Packed& from);

  inline Packed& operator=(const Packed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packed& default_instance();

  void Swap(Packed* other);

  // implements Message ----------------------------------------------

  Packed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Packed& from);
  void MergeFrom(const Packed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 i32 = 1 [packed = true];
  inline int i32_size() const;
  inline void clear_i32();
  static const int kI32FieldNumber = 1;
  inline ::google::protobuf::int32 i32(int index) const;
  inline void set_i32(int index, ::google::protobuf::int32 value);
  inline void add_i32(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      i32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_i32();

  // repeated int64 i64 = 2 [packed = true];
  inline int i64_size() const;
  inline void clear_i64();
  static const int kI64FieldNumber = 2;
  inline ::google::protobuf::int64 i64(int index) const;
  inline void set_i64(int index, ::google::protobuf::int64 value);
  inline void add_i64(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      i64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_i64();

  // repeated sint32 s32 = 3 [packed = true];
  inline int s32_size() const;
  inline void clear_s32();
  static const int kS32FieldNumber = 3;
  inline ::google::protobuf::int32 s32(int index) const;
  inline void set_s32(int index, ::google::protobuf::int32 value);
  inline void add_s32(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      s32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_s32();

  // repeated sint64 s64 = 4 [packed = true];
  inline int s64_size() const;
  inline void clear_s64();
  static const int kS64FieldNumber = 4;
  inline ::google::protobuf::int64 s64(int index) const;
  inline void set_s64(int index, ::google::protobuf::int64 value);
  inline void add_s64(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      s64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_s64();

  // repeated uint32 u32 = 5 [packed = true];
  inline int u32_size() const;
  inline void clear_u32();
  static const int kU32FieldNumber = 5;
  inline ::google::protobuf::uint32 u32(int index) const;
  inline void set_u32(int index, ::google::protobuf::uint32 value);
  inline void add_u32(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      u32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_u32();

  // repeated uint64 u64 = 6 [packed = true];
  inline int u64_size() const;
  inline void clear_u64();
  static const int kU64FieldNumber = 6;
  inline ::google::protobuf::uint64 u64(int index) const;
  inline void set_u64(int index, ::google::protobuf::uint64 value);
  inline void add_u64(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      u64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_u64();

  // repeated fixed32 f32 = 7 [packed = true];
  inline int f32_size() const;
  inline void clear_f32();
  static const int kF32FieldNumber = 7;
  inline ::google::protobuf::uint32 f32(int index) const;
  inline void set_f32(int index, ::google::protobuf::uint32 value);
  inline void add_f32(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      f32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_f32();

  // repeated fixed64 f64 = 8 [packed = true];
  inline int f64_size() const;
  inline void clear_f64();
  static const int kF64FieldNumber = 8;
  inline ::google::protobuf::uint64 f64(int index) const;
  inline void set_f64(int index, ::google::protobuf::uint64 value);
  inline void add_f64(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      f64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_f64();

  // repeated sfixed32 sf32 = 9 [packed = true];
  inline int sf32_size() const;
  inline void clear_sf32();
  static const int kSf32FieldNumber = 9;
  inline ::google::protobuf::int32 sf32(int index) const;
  inline void set_sf32(int index, ::google::protobuf::int32 value);
  inline void add_sf32(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      sf32() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_sf32();

  // repeated sfixed64 sf64 = 10 [packed = true];
  inline int sf64_size() const;
  inline void clear_sf64();
  static const int kSf64FieldNumber = 10;
  inline ::google::protobuf::int64 sf64(int index) const;
  inline void set_sf64(int index, ::google::protobuf::int64 value);
  inline void add_sf64(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      sf64() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_sf64();

  // repeated float f = 11 [packed = true];
  inline int f_size() const;
  inline void clear_f();
  static const int kFFieldNumber = 11;
  inline float f(int index) const;
  inline void set_f(int index, float value);
  inline void add_f(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      f() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_f();

  // repeated double d = 12 [packed = true];
  inline int d_size() const;
  inline void clear_d();
  static const int kDFieldNumber = 12;
  inline double d(int index) const;
  inline void set_d(int index, double value);
  inline void add_d(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      d() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_d();

  // repeated bool b = 13 [packed = true];
  inline int b_size() const;
  inline void clear_b();
  static const int kBFieldNumber = 13;
  inline bool b(int index) const;
  inline void set_b(int index, bool value);
  inline void add_b(bool value);
  inline const ::google::protobuf::RepeatedField< bool >&
      b() const;
  inline ::google::protobuf::RepeatedField< bool >*
      mutable_b();

  // @@protoc_insertion_point(class_scope:Packed)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > i32_;
  mutable int _i32_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > i64_;
  mutable int _i64_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > s32_;
  mutable int _s32_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > s64_;
  mutable int _s64_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > u32_;
  mutable int _u32_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > u64_;
  mutable int _u64_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > f32_;
  mutable int _f32_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > f64_;
  mutable int _f64_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > sf32_;
  mutable int _sf32_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > sf64_;
  mutable int _sf64_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > f_;
  mutable int _f_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > d_;
  mutable int _d_cached_byte_size_;
  ::google::protobuf::RepeatedField< bool > b_;
  mutable int _b_cached_byte_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_TestPacked_2eproto();
  friend void protobuf_AssignDesc_TestPacked_2eproto();
  friend void protobuf_ShutdownFile_TestPacked_2eproto();

  void InitAsDefaultInstance();
  static Packed* default_instance_;
};
// ===================================================================


// ===================================================================

// Packed

// repeated int32 i32 = 1 [packed = true];
inline int Packed::i32_size() const {
  return i32_.size();
}
inline void Packed::clear_i32() {
  i32_.Clear();
}
inline ::google::protobuf::int32 Packed::i32(int index) const {
  return i32_.Get(index);
}
inline void Packed::set_i32(int index, ::google::protobuf::int32 value) {
  i32_.Set(index, value);
}
inline void Packed::add_i32(::google::protobuf::int32 value) {
  i32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Packed::i32() const {
  return i32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Packed::mutable_i32() {
  return &i32_;
}

// repeated int64 i64 = 2 [packed = true];
inline int Packed::i64_size() const {
  return i64_.size();
}
inline void Packed::clear_i64() {
  i64_.Clear();
}
inline ::google::protobuf::int64 Packed::i64(int index) const {
  return i64_.Get(index);
}
inline void Packed::set_i64(int index, ::google::protobuf::int64 value) {
  i64_.Set(index, value);
}
inline void Packed::add_i64(::google::protobuf::int64 value) {
  i64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Packed::i64() const {
  return i64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Packed::mutable_i64() {
  return &i64_;
}

// repeated sint32 s32 = 3 [packed = true];
inline int Packed::s32_size() const {
  return s32_.size();
}
inline void Packed::clear_s32() {
  s32_.Clear();
}
inline ::google::protobuf::int32 Packed::s32(int index) const {
  return s32_.Get(index);
}
inline void Packed::set_s32(int index, ::google::protobuf::int32 value) {
  s32_.Set(index, value);
}
inline void Packed::add_s32(::google::protobuf::int32 value) {
  s32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Packed::s32() const {
  return s32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Packed::mutable_s32() {
  return &s32_;
}

// repeated sint64 s64 = 4 [packed = true];
inline int Packed::s64_size() const {
  return s64_.size();
}
inline void Packed::clear_s64() {
  s64_.Clear();
}
inline ::google::protobuf::int64 Packed::s64(int index) const {
  return s64_.Get(index);
}
inline void Packed::set_s64(int index, ::google::protobuf::int64 value) {
  s64_.Set(index, value);
}
inline void Packed::add_s64(::google::protobuf::int64 value) {
  s64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Packed::s64() const {
  return s64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Packed::mutable_s64() {
  return &s64_;
}

// repeated uint32 u32 = 5 [packed = true];
inline int Packed::u32_size() const {
  return u32_.size();
}
inline void Packed::clear_u32() {
  u32_.Clear();
}
inline ::google::protobuf::uint32 Packed::u32(int index) const {
  return u32_.Get(index);
}
inline void Packed::set_u32(int index, ::google::protobuf::uint32 value) {
  u32_.Set(index, value);
}
inline void Packed::add_u32(::google::protobuf::uint32 value) {
  u32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Packed::u32() const {
  return u32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Packed::mutable_u32() {
  return &u32_;
}

// repeated uint64 u64 = 6 [packed = true];
inline int Packed::u64_size() const {
  return u64_.size();
}
inline void Packed::clear_u64() {
  u64_.Clear();
}
inline ::google::protobuf::uint64 Packed::u64(int index) const {
  return u64_.Get(index);
}
inline void Packed::set_u64(int index, ::google::protobuf::uint64 value) {
  u64_.Set(index, value);
}
inline void Packed::add_u64(::google::protobuf::uint64 value) {
  u64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Packed::u64() const {
  return u64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Packed::mutable_u64() {
  return &u64_;
}

// repeated fixed32 f32 = 7 [packed = true];
inline int Packed::f32_size() const {
  return f32_.size();
}
inline void Packed::clear_f32() {
  f32_.Clear();
}
inline ::google::protobuf::uint32 Packed::f32(int index) const {
  return f32_.Get(index);
}
inline void Packed::set_f32(int index, ::google::protobuf::uint32 value) {
  f32_.Set(index, value);
}
inline void Packed::add_f32(::google::protobuf::uint32 value) {
  f32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Packed::f32() const {
  return f32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Packed::mutable_f32() {
  return &f32_;
}

// repeated fixed64 f64 = 8 [packed = true];
inline int Packed::f64_size() const {
  return f64_.size();
}
inline void Packed::clear_f64() {
  f64_.Clear();
}
inline ::google::protobuf::uint64 Packed::f64(int index) const {
  return f64_.Get(index);
}
inline void Packed::set_f64(int index, ::google::protobuf::uint64 value) {
  f64_.Set(index, value);
}
inline void Packed::add_f64(::google::protobuf::uint64 value) {
  f64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Packed::f64() const {
  return f64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Packed::mutable_f64() {
  return &f64_;
}

// repeated sfixed32 sf32 = 9 [packed = true];
inline int Packed::sf32_size() const {
  return sf32_.size();
}
inline void Packed::clear_sf32() {
  sf32_.Clear();
}
inline ::google::protobuf::int32 Packed::sf32(int index) const {
  return sf32_.Get(index);
}
inline void Packed::set_sf32(int index, ::google::protobuf::int32 value) {
  sf32_.Set(index, value);
}
inline void Packed::add_sf32(::google::protobuf::int32 value) {
  sf32_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Packed::sf32() const {
  return sf32_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Packed::mutable_sf32() {
  return &sf32_;
}

// repeated sfixed64 sf64 = 10 [packed = true];
inline int Packed::sf64_size() const {
  return sf64_.size();
}
inline void Packed::clear_sf64() {
  sf64_.Clear();
}
inline ::google::protobuf::int64 Packed::sf64(int index) const {
  return sf64_.Get(index);
}
inline void Packed::set_sf64(int index, ::google::protobuf::int64 value) {
  sf64_.Set(index, value);
}
inline void Packed::add_sf64(::google::protobuf::int64 value) {
  sf64_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
Packed::sf64() const {
  return sf64_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
Packed::mutable_sf64() {
  return &sf64_;
}

// repeated float f = 11 [packed = true];
inline int Packed::f_size() const {
  return f_.size();
}
inline void Packed::clear_f() {
  f_.Clear();
}
inline float Packed::f(int index) const {
  return f_.Get(index);
}
inline void Packed::set_f(int index, float value) {
  f_.Set(index, value);
}
inline void Packed::add_f(float value) {
  f_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Packed::f() const {
  return f_;
}
inline ::google::protobuf::RepeatedField< float >*
Packed::mutable_f() {
  return &f_;
}

// repeated double d = 12 [packed = true];
inline int Packed::d_size() const {
  return d_.size();
}
inline void Packed::clear_d() {
  d_.Clear();
}
inline double Packed::d(int index) const {
  return d_.Get(index);
}
inline void Packed::set_d(int index, double value) {
  d_.Set(index, value);
}
inline void Packed::add_d(double value) {
  d_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
Packed::d() const {
  return d_;
}
inline ::google::protobuf::RepeatedField< double >*
Packed::mutable_d() {
  return &d_;
}

// repeated bool b = 13 [packed = true];
inline int Packed::b_size() const {
  return b_.size();
}
inline void Packed::clear_b() {
  b_.Clear();
}
inline bool Packed::b(int index) const {
  return b_.Get(index);
}
inline void Packed::set_b(int index, bool value) {
  b_.Set(index, value);
}
inline void Packed::add_b(bool value) {
  b_.Add(value);
}
inline const ::google::protobuf::RepeatedField< bool >&
Packed::b() const {
  return b_;
}
inline ::google::protobuf::RepeatedField< bool >*
Packed::mutable_b() {
  return &b_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TestPacked_2eproto__INCLUDED
